Input: GraphNodes[], Edge[], upper[]
Output: group[]

for node ∊ {0,...,n-1} in parallel do 
    Beginning = GraphNodes[node].starting
    Completion = Beginning + GraphNodes[node].no_of_edges
    for i in range(Beginning, Completion) do 
        destination = Edge[i]
        in_degree[destination]+=1 // atomic increment
    end for
end for

group_id = 0
for node ∊ {0,...,n-1} in parallel do 
    if upper[node] == 1 then
        frontier[node]=True // atomic write
    end if
end for

// keep iterating until no further changes: (upper loop)
while True:
    Modified = False

    // for all nodes in the current frontier, mark them with the group ID they belong to. if frontier empty, end  
    for node ∊ {0,...,n-1} in parallel do 
        if frontier[node] and not visited[node] then
            group[node] = group_id 
            visited[node] = True  
	end if
    end for
    // for all the edges of the nodes at the current frontier, add the destination to be visited in the next_frontier list
    for node ∊ {0,...,n-1} in parallel do 
        if frontier[node] then
            Beginning = GraphNodes[node].starting
            Completion = Beginning + GraphNodes[node].no_of_edges
            for i in range(Beginning, Completion) do 
                destination = Edge[i]
		 in_degree[destination] -= 1 // atomic decrement 
                if in_degree[destination] == 0 then 
                    next_frontier[destination] = True  // atomic write
                    Modified = True
		end if
	     end for
	end if
     end for

     if not Modified then // the graph is empty 
        break 
     end if 

    group_id += 1 // atomic increment
    
     // once done switch frontier with next frontier, empty next frontier
    for node ∊ {0,...,n-1} in parallel do 
        frontier[node] = next_frontier[node]   // atomic write
        next_frontier[node] = False 	        // atomic write
    end for
end while

sorted_nodes = []
for i in range(group_id+1): 
    for node ∊ {0,...,n-1} in parallel do 
        if group[node] == i then
            sorted_nodes.append(node)
	end if
    end for
end for
