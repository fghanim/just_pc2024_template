High level description of the algorithm

Algorithm Name: topological sort
graph G = (V,E), where V = {1, ..., n} and |E| = m; sort the nodes in groups such that first group are node with no incoming edges, then every group after that will contain all 'freed' nodes. a node is freed if all its parents have been added to a previous group.

input:
	GraphNodes[i].no_of_edges = no. of edges adjacent to node i
	GraphNodes[i].starting = start location in Edges, where the list of edges outgoing from vertex i begins.
	Edge[j] = the destination Node for this edge. Source is obtained from the source GraphNodes covering this node
	upper[i] = 1 If node i has no dependency, 0 otherwise

Output: 
  group[i] = the group order of node i in the topological sorting of the graph

high level algorithm:
keep iterating until no further changes: (upper loop)
- for all nodes in the current frontier, mark them with the group ID they belong to. if frontier empty, end
- for all the edges of the nodes at the current frontier, add the destination to be visited in the next_frontier list
- once done switch frontier with next frontier, empty next frontier
- if this is done for any node, indicate that we will iterate one more round (upper loop), and prepare to visit next level of the tree.
